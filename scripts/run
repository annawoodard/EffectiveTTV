#!/usr/bin/env python

import argparse
import imp
import logging
import os

from NPFit.NPFit.actionable import annotate, parse, concatenate, combine
from NPFit.NPFit.makeflow import make
from NPFit.NPFit.plotting import plot
from NPFit.NPFit.fluctuate import fluctuate

parser = argparse.ArgumentParser(description='for additional help try `run {mode} -h`')
subparsers = parser.add_subparsers(help='mode options')

parser.add_argument('config', metavar='config', type=str, help='a configuration file to use')
parser.add_argument('-v', '--verbose', action="count", default=0,
                    help="increase verbosity")
parser.add_argument('-q', '--quiet', action="count", default=0,
                    help="decrease verbosity")

make_parser = subparsers.add_parser('make', help='produce makeflow file')
make_parser.set_defaults(func=make)

make_parser = subparsers.add_parser('annotate', help='write README to the output directory')
make_parser.set_defaults(func=annotate)

parse_parser = subparsers.add_parser('parse', help="parse gen-level file to extract cross sections")
parse_parser.add_argument('file', help='file to parse')
parse_parser.set_defaults(func=parse)

concatenate_parser = subparsers.add_parser('concatenate', help='concatenate cross sections')
concatenate_parser.add_argument('--files', nargs='+', help='files to concatenate (wildcards accepted)')
concatenate_parser.add_argument('--output', default='cross_sections.npz', help='name of output file')
concatenate_parser.set_defaults(func=concatenate)

fluctuate_parser = subparsers.add_parser('fluctuate', help="perturb fit values by random amounts sampled from the covariance matrix")
fluctuate_parser.add_argument('coefficient', help='coefficient to perturb')
fluctuate_parser.add_argument('perturbations', help='number of perturbations to execute')
fluctuate_parser.set_defaults(func=fluctuate)

plot_parser = subparsers.add_parser('plot', help='plot cross section scans and results')
plot_parser.add_argument('--coefficient', nargs='+', help='only plot given coefficients (default is all)')
plot_parser.add_argument('-e', '--header', help="plot header (final or preliminary)")
plot_parser.add_argument('-i', '--index', type=int, help='which plot to produce (index in config file, default is all)')
plot_parser.set_defaults(func=plot)

combine_parser = subparsers.add_parser('combine', help='run combine')
combine_parser.add_argument('coefficient', nargs='+', help='coefficients to run on')
combine_parser.add_argument('-i', '--index', type=int, help='index to run (for grid scans)')
combine_parser.set_defaults(func=combine)

args = parser.parse_args()

if 'LOCALRT' not in os.environ:
    parser.error("need to do a `cmsenv` first")

logging.basicConfig(
    datefmt="%Y-%m-%d %H:%M:%S",
    format="%(asctime)s [%(levelname)s] - %(filename)s %(lineno)d: %(message)s")

logging.__dict__['root'].level = (2 + args.quiet - args.verbose) * 10

config = imp.load_source('', args.config).config
configdir, config['fn'] = os.path.split(args.config)

for k in ('indir', 'outdir'):
    if k in config:
        config[k] = os.path.abspath(os.path.expanduser(os.path.expandvars(config[k])))

for path in ('cross_sections', 'workspaces', 'scans', 'plots'):
    if not os.path.exists(os.path.join(config['outdir'], path)):
        os.makedirs(os.path.join(config['outdir'], path))

args.func(args, config)
